version: 2
jobs:
#  docker:
  #    machine: true
  #    steps:
  #      - checkout
  #      - run: docker-compose build geo-app
  scala:
    working_directory: ~/project
    docker:
      - image: circleci/openjdk:11
    steps:
      - checkout
      - restore_cache:
          key: sbt-cache-v1
      - run:
          name: Set up GPG and sbt-pgp
          command: |
            # See https://discuss.circleci.com/t/gpg-keys-as-environment-variables/28641/3
            echo -e "$OSSRH_GPG_KEY" | gpg --import
            mkdir ~/.sbt/gpg
            gpg -a --export-secret-keys >~/.sbt/gpg/secring.asc
            mkdir -p ~/.sbt/1.0/plugins
            echo 'addSbtPlugin("com.jsuereth" % "sbt-pgp" % "2.0.0")' >~/.sbt/1.0/plugins/pgp.sbt
      - run:
          name: Write OSSRH credentials
          command: |
            mkdir -p ~/.sbt/1.0
            echo "credentials += Credentials(\"Sonatype Nexus Repository Manager\", \"oss.sonatype.org\", \"$SONATYPE_USERNAME\", \"$SONATYPE_PASSWORD\")" >>~/.sbt/1.0/sonatype.sbt
            echo "pgpPassphrase := Some(Array[Char]())" >>~/.sbt/1.0/sonatype.sbt
      - run:
          name: Create test-results directory
          command: mkdir -p test-results/scala
      - run:
          name: Test
          command: |
            sbt clean update package test
            cp app/geo/target/test-reports/*.xml ~/project/test-results/scala
            # cp lib/scala/base/target/test-reports/*.xml ~/project/test-results/scala
      - save_cache:
          key: sbt-cache-v1
          paths:
            - "~/.ivy2/cache"
            - "~/.sbt"
            - "~/.m2"
      - store_test_results:
          path: test-results
      - run:
          name: Publish (master branch only)
          command: |
            #if [ "${CIRCLE_BRANCH}" == "master" ]; then
              sbt publishSigned
            #fi
  ts:
    working_directory: ~/project
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          key: gui-dependency-cache-v1-{{ checksum "package.json" }}-{{ checksum "app/geo/gui/package.json" }}-{{ checksum "lib/ts/base/package.json" }}
      - run:
          command: |
            npm install
            npm run lerna:bootstrap
      - save_cache:
          key: gui-dependency-cache-v1-{{ checksum "package.json" }}-{{ checksum "app/geo/gui/package.json" }}-{{ checksum "lib/ts/base/package.json" }}
          paths:
            - ./node_modules
            - ./lib/ts/base/node_modules
      - run:
          command: |
            cd lib/ts/base
            npm run build
            cd ../../../app/geo/gui
            npm run build
workflows:
  version: 2
  build:
    jobs:
      #      - docker
      - scala
      - ts
